{"remainingRequest":"D:\\front-end files\\test\\my-gridsome\\node_modules\\babel-loader\\lib\\index.js??ref--1-1!D:\\front-end files\\test\\my-gridsome\\node_modules\\gridsome\\app\\router.js","dependencies":[{"path":"D:\\front-end files\\test\\my-gridsome\\node_modules\\gridsome\\app\\router.js","mtime":1628149246772},{"path":"D:\\front-end files\\test\\my-gridsome\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1628149244789},{"path":"D:\\front-end files\\test\\my-gridsome\\node_modules\\babel-loader\\lib\\index.js","mtime":1628149244548}],"contextDependencies":[],"result":["import _objectSpread from \"D:/front-end files/test/my-gridsome/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport Vue from 'vue';\nimport Router from 'vue-router';\nimport routes from '~/.temp/routes.js';\nVue.use(Router);\nvar router = new Router({\n  base: process.env.PUBLIC_PATH,\n  mode: 'history',\n  fallback: false,\n  routes: routes,\n  scrollBehavior: function scrollBehavior(to, from, saved) {\n    if (saved) {\n      return saved;\n    } else if (to.hash) {\n      return {\n        selector: to.hash\n      };\n    } else {\n      return {\n        x: 0,\n        y: 0\n      };\n    }\n  }\n});\n/**\r\n * Flag custom routes to not fetch GraphQL results or context for them.\r\n * TODO: This might be unnecessary once static routes are lazy-loaded.\r\n */\n\nfunction customRoute(options) {\n  var meta = _objectSpread(_objectSpread({}, options.meta), {}, {\n    __custom: true\n  });\n\n  var route = _objectSpread(_objectSpread({}, options), {}, {\n    meta: meta\n  });\n\n  if (Array.isArray(options.children)) {\n    route.children = options.children.map(customRoute);\n  }\n\n  return route;\n}\n\nvar addRoutes = router.addRoutes;\n\nrouter.addRoutes = function (routes) {\n  return addRoutes.call(router, routes.map(customRoute));\n};\n\nexport default router;",{"version":3,"sources":["D:/front-end files/test/my-gridsome/node_modules/gridsome/app/router.js"],"names":["Vue","Router","routes","use","router","base","process","env","PUBLIC_PATH","mode","fallback","scrollBehavior","to","from","saved","hash","selector","x","y","customRoute","options","meta","__custom","route","Array","isArray","children","map","addRoutes","call"],"mappings":";;;AAAA,OAAOA,GAAP,MAAgB,KAAhB;AACA,OAAOC,MAAP,MAAmB,YAAnB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEAF,GAAG,CAACG,GAAJ,CAAQF,MAAR;AAEA,IAAMG,MAAM,GAAG,IAAIH,MAAJ,CAAW;AACxBI,EAAAA,IAAI,EAAEC,OAAO,CAACC,GAAR,CAAYC,WADM;AAExBC,EAAAA,IAAI,EAAE,SAFkB;AAGxBC,EAAAA,QAAQ,EAAE,KAHc;AAIxBR,EAAAA,MAAM,EAANA,MAJwB;AAMxBS,EAAAA,cANwB,0BAMRC,EANQ,EAMJC,IANI,EAMEC,KANF,EAMS;AAC/B,QAAIA,KAAJ,EAAW;AACT,aAAOA,KAAP;AACD,KAFD,MAEO,IAAIF,EAAE,CAACG,IAAP,EAAa;AAClB,aAAO;AAAEC,QAAAA,QAAQ,EAAEJ,EAAE,CAACG;AAAf,OAAP;AACD,KAFM,MAEA;AACL,aAAO;AAAEE,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE;AAAX,OAAP;AACD;AACF;AAduB,CAAX,CAAf;AAiBA;AACA;AACA;AACA;;AACA,SAASC,WAAT,CAAsBC,OAAtB,EAA+B;AAC7B,MAAMC,IAAI,mCAAQD,OAAO,CAACC,IAAhB;AAAsBC,IAAAA,QAAQ,EAAE;AAAhC,IAAV;;AACA,MAAMC,KAAK,mCAAQH,OAAR;AAAiBC,IAAAA,IAAI,EAAJA;AAAjB,IAAX;;AACA,MAAIG,KAAK,CAACC,OAAN,CAAcL,OAAO,CAACM,QAAtB,CAAJ,EAAqC;AACnCH,IAAAA,KAAK,CAACG,QAAN,GAAiBN,OAAO,CAACM,QAAR,CAAiBC,GAAjB,CAAqBR,WAArB,CAAjB;AACD;;AACD,SAAOI,KAAP;AACD;;AAED,IAAMK,SAAS,GAAGxB,MAAM,CAACwB,SAAzB;;AACAxB,MAAM,CAACwB,SAAP,GAAmB,UAAA1B,MAAM,EAAI;AAC3B,SAAO0B,SAAS,CAACC,IAAV,CAAezB,MAAf,EAAuBF,MAAM,CAACyB,GAAP,CAAWR,WAAX,CAAvB,CAAP;AACD,CAFD;;AAIA,eAAef,MAAf","sourcesContent":["import Vue from 'vue'\r\nimport Router from 'vue-router'\r\nimport routes from '~/.temp/routes.js'\r\n\r\nVue.use(Router)\r\n\r\nconst router = new Router({\r\n  base: process.env.PUBLIC_PATH,\r\n  mode: 'history',\r\n  fallback: false,\r\n  routes,\r\n\r\n  scrollBehavior (to, from, saved) {\r\n    if (saved) {\r\n      return saved\r\n    } else if (to.hash) {\r\n      return { selector: to.hash }\r\n    } else {\r\n      return { x: 0, y: 0 }\r\n    }\r\n  }\r\n})\r\n\r\n/**\r\n * Flag custom routes to not fetch GraphQL results or context for them.\r\n * TODO: This might be unnecessary once static routes are lazy-loaded.\r\n */\r\nfunction customRoute (options) {\r\n  const meta = { ...options.meta, __custom: true }\r\n  const route = { ...options, meta }\r\n  if (Array.isArray(options.children)) {\r\n    route.children = options.children.map(customRoute)\r\n  }\r\n  return route\r\n}\r\n\r\nconst addRoutes = router.addRoutes\r\nrouter.addRoutes = routes => {\r\n  return addRoutes.call(router, routes.map(customRoute))\r\n}\r\n\r\nexport default router\r\n"]}]}